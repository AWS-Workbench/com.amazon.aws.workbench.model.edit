/**
 */
package dynamodb.provider;

import dynamodb.util.DynamodbAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DynamodbItemProviderAdapterFactory extends DynamodbAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DynamodbItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.LocalSecondaryIndexPropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalSecondaryIndexPropsBuilder_dynamodbItemProvider localSecondaryIndexPropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.LocalSecondaryIndexPropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalSecondaryIndexPropsBuilder_dynamodbAdapter() {
		if (localSecondaryIndexPropsBuilder_dynamodbItemProvider == null) {
			localSecondaryIndexPropsBuilder_dynamodbItemProvider = new LocalSecondaryIndexPropsBuilder_dynamodbItemProvider(
					this);
		}

		return localSecondaryIndexPropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.EnableScalingPropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnableScalingPropsBuilder_dynamodbItemProvider enableScalingPropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.EnableScalingPropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnableScalingPropsBuilder_dynamodbAdapter() {
		if (enableScalingPropsBuilder_dynamodbItemProvider == null) {
			enableScalingPropsBuilder_dynamodbItemProvider = new EnableScalingPropsBuilder_dynamodbItemProvider(this);
		}

		return enableScalingPropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.TablePropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TablePropsBuilder_dynamodbItemProvider tablePropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.TablePropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTablePropsBuilder_dynamodbAdapter() {
		if (tablePropsBuilder_dynamodbItemProvider == null) {
			tablePropsBuilder_dynamodbItemProvider = new TablePropsBuilder_dynamodbItemProvider(this);
		}

		return tablePropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.TableBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableBuilder_dynamodbItemProvider tableBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.TableBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableBuilder_dynamodbAdapter() {
		if (tableBuilder_dynamodbItemProvider == null) {
			tableBuilder_dynamodbItemProvider = new TableBuilder_dynamodbItemProvider(this);
		}

		return tableBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.GlobalSecondaryIndexPropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalSecondaryIndexPropsBuilder_dynamodbItemProvider globalSecondaryIndexPropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.GlobalSecondaryIndexPropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalSecondaryIndexPropsBuilder_dynamodbAdapter() {
		if (globalSecondaryIndexPropsBuilder_dynamodbItemProvider == null) {
			globalSecondaryIndexPropsBuilder_dynamodbItemProvider = new GlobalSecondaryIndexPropsBuilder_dynamodbItemProvider(
					this);
		}

		return globalSecondaryIndexPropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.TableOptionsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableOptionsBuilder_dynamodbItemProvider tableOptionsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.TableOptionsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableOptionsBuilder_dynamodbAdapter() {
		if (tableOptionsBuilder_dynamodbItemProvider == null) {
			tableOptionsBuilder_dynamodbItemProvider = new TableOptionsBuilder_dynamodbItemProvider(this);
		}

		return tableOptionsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.SecondaryIndexPropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecondaryIndexPropsBuilder_dynamodbItemProvider secondaryIndexPropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.SecondaryIndexPropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecondaryIndexPropsBuilder_dynamodbAdapter() {
		if (secondaryIndexPropsBuilder_dynamodbItemProvider == null) {
			secondaryIndexPropsBuilder_dynamodbItemProvider = new SecondaryIndexPropsBuilder_dynamodbItemProvider(this);
		}

		return secondaryIndexPropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.UtilizationScalingPropsBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilizationScalingPropsBuilder_dynamodbItemProvider utilizationScalingPropsBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.UtilizationScalingPropsBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilizationScalingPropsBuilder_dynamodbAdapter() {
		if (utilizationScalingPropsBuilder_dynamodbItemProvider == null) {
			utilizationScalingPropsBuilder_dynamodbItemProvider = new UtilizationScalingPropsBuilder_dynamodbItemProvider(
					this);
		}

		return utilizationScalingPropsBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.AttributeBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeBuilder_dynamodbItemProvider attributeBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.AttributeBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeBuilder_dynamodbAdapter() {
		if (attributeBuilder_dynamodbItemProvider == null) {
			attributeBuilder_dynamodbItemProvider = new AttributeBuilder_dynamodbItemProvider(this);
		}

		return attributeBuilder_dynamodbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dynamodb.TableAttributesBuilder_dynamodb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableAttributesBuilder_dynamodbItemProvider tableAttributesBuilder_dynamodbItemProvider;

	/**
	 * This creates an adapter for a {@link dynamodb.TableAttributesBuilder_dynamodb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAttributesBuilder_dynamodbAdapter() {
		if (tableAttributesBuilder_dynamodbItemProvider == null) {
			tableAttributesBuilder_dynamodbItemProvider = new TableAttributesBuilder_dynamodbItemProvider(this);
		}

		return tableAttributesBuilder_dynamodbItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
